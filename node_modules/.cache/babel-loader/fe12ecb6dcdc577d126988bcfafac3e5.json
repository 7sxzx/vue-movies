{"remainingRequest":"/Users/David/_Proyectos/_GIT/vue-movies/node_modules/babel-loader/lib/index.js!/Users/David/_Proyectos/_GIT/vue-movies/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/David/_Proyectos/_GIT/vue-movies/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/David/_Proyectos/_GIT/vue-movies/src/components/ScoreIndicator.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/David/_Proyectos/_GIT/vue-movies/src/components/ScoreIndicator.vue","mtime":1570986713000},{"path":"/Users/David/_Proyectos/_GIT/vue-movies/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/David/_Proyectos/_GIT/vue-movies/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/David/_Proyectos/_GIT/vue-movies/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/David/_Proyectos/_GIT/vue-movies/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.regexp.split\";\nimport _slicedToArray from \"/Users/David/_Proyectos/_GIT/vue-movies/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'ScoreIndicator',\n  props: ['score', 'size', 'strokeWidth', 'strokeColor'],\n  data: function data() {\n    return {\n      strokeDasharray: 0,\n      strokeDashoffset: 0,\n      transitionDuration: 0,\n      valueInt: '0.',\n      valueDec: '00'\n    };\n  },\n  computed: {\n    center: function center() {\n      return Math.floor(this.size / 2);\n    },\n    radius: function radius() {\n      return this.center - this.strokeWidth;\n    },\n    strokePathStyles: function strokePathStyles() {\n      return {\n        stroke: this.strokeColor,\n        'stroke-width': this.strokeWidth\n      };\n    },\n    strokeFillStyles: function strokeFillStyles() {\n      return {\n        stroke: this.strokeColor,\n        'stroke-width': this.strokeWidth,\n        'stroke-dasharray': this.strokeDasharray,\n        'stroke-dashoffset': this.strokeDashoffset,\n        transition: \"stroke-dashoffset \".concat(this.transitionDuration, \"ms ease\")\n      };\n    }\n  },\n  created: function created() {\n    this.animateCircle();\n    this.animateValue();\n  },\n  methods: {\n    animateCircle: function animateCircle() {\n      var _this = this;\n\n      var circumference = 2 * Math.PI * this.radius;\n      var score = parseFloat(this.score);\n      var offset = circumference * ((10 - score) / 10);\n      this.strokeDasharray = circumference;\n      this.strokeDashoffset = circumference;\n      this.transitionDuration = 900;\n      setTimeout(function () {\n        return _this.strokeDashoffset = offset;\n      }, 100);\n    },\n    animateValue: function animateValue() {\n      var _String$split = String(this.score).split('.'),\n          _String$split2 = _slicedToArray(_String$split, 2),\n          int = _String$split2[0],\n          dec = _String$split2[1];\n\n      var _ref = [Number(int), Number(dec)];\n      int = _ref[0];\n      dec = _ref[1];\n      if (dec < 10) dec = dec * 10;\n      var decPoint = dec > 0 ? '.' : '';\n      this.increaseValue(int, 'int', decPoint);\n      dec > 0 ? this.increaseValue(dec, 'dec') : this.valueDec = '';\n    },\n    increaseValue: function increaseValue(value, type) {\n      var _this2 = this;\n\n      var decPoint = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      var interval = this.transitionDuration / value,\n          counter = 0;\n      var increaseInterval = setInterval(function () {\n        if (counter === value) {\n          window.clearInterval(increaseInterval);\n        }\n\n        type == 'int' ? _this2.valueInt = counter + decPoint : _this2.valueDec = counter;\n        counter++;\n      }, interval);\n    }\n  }\n};",{"version":3,"sources":["ScoreIndicator.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"display\">\n    <div class=\"circle\">\n      <svg :width=\"size\" :height=\"size\" class=\"circle__svg\">\n        <circle\n          :cx=\"center\"\n          :cy=\"center\"\n          :r=\"radius\"\n          class=\"circle__progress circle__progress--path\"\n          :style=\"strokePathStyles\"\n        />\n        <circle\n          :cx=\"center\"\n          :cy=\"center\"\n          :r=\"radius\"\n          class=\"circle__progress circle__progress--fill\"\n          :style=\"strokeFillStyles\"\n        />\n      </svg>\n\n      <div class=\"percent\">\n        <span class=\"percent__int\">{{ valueInt }}</span>\n        <span class=\"percent__dec\">{{ valueDec }}</span>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'ScoreIndicator',\n  props: [\n    'score', 'size', 'strokeWidth', 'strokeColor'\n  ],\n  data() {\n    return {\n      strokeDasharray: 0,\n      strokeDashoffset: 0,\n      transitionDuration: 0,\n      valueInt: '0.',\n      valueDec: '00'\n    };\n  },\n  computed: {\n    center(){\n      return Math.floor(this.size / 2)\n    },\n    radius(){\n      return this.center - this.strokeWidth\n    },\n    strokePathStyles() {\n      return {\n        stroke: this.strokeColor,\n        'stroke-width': this.strokeWidth\n      };\n    },\n    strokeFillStyles() {\n      return {\n        stroke: this.strokeColor,\n        'stroke-width': this.strokeWidth,\n        'stroke-dasharray': this.strokeDasharray,\n        'stroke-dashoffset': this.strokeDashoffset,\n        transition: `stroke-dashoffset ${this.transitionDuration}ms ease`\n      };\n    }\n  },\n  created() {\n    this.animateCircle();\n    this.animateValue();\n  },\n  methods: {\n    animateCircle() {\n      const circumference = 2 * Math.PI * this.radius;\n      const score = parseFloat(this.score);\n      const offset = circumference * ((10 - score) / 10);\n\n      this.strokeDasharray = circumference;\n      this.strokeDashoffset = circumference;\n      this.transitionDuration = 900;\n      setTimeout(() => (this.strokeDashoffset = offset), 100);\n    },\n    animateValue() {\n      let [int, dec] = String(this.score).split('.');\n      [int, dec] = [Number(int), Number(dec)];\n      if (dec < 10) dec = dec * 10;\n      const decPoint = (dec > 0) ? '.' : '';\n\n      this.increaseValue(int, 'int', decPoint);\n      (dec > 0) ? this.increaseValue(dec, 'dec') : this.valueDec = '';\n    },\n    increaseValue(value, type, decPoint=''){\n      let interval = this.transitionDuration / value,\n          counter = 0;\n\n      let increaseInterval = setInterval(() => {\n        if (counter === value) { window.clearInterval(increaseInterval); }\n        (type == 'int') ? this.valueInt = counter + decPoint : this.valueDec = counter;\n        counter++;\n      }, interval)\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.display {\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n.circle {\n  position: relative;\n}\n.circle__svg {\n  transform: rotate(-90deg);\n}\n.circle__progress {\n  fill: none;\n  stroke-opacity: 0.3;\n  stroke-linecap: round;\n}\n.circle__progress--fill {\n  stroke-opacity: 1;\n}\n.percent {\n  width: 100%;\n  top: 50%;\n  left: 50%;\n  position: absolute;\n  font-weight: bold;\n  text-align: center;\n  line-height: 2em;\n  transform: translate(-50%, -50%);\n}\n\n.percent__int {\n  font-size: 1.8em;\n}\n.percent__dec {\n  font-size: 1.4em;\n}\n</style>"],"sourceRoot":"src/components"}]}